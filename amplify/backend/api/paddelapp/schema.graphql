# type Mutation{
#   startTraining(invitee: String!): TrainingData
#       @function(name: "startTraining-${env}")
#       @aws_cognito_user_pools
# }
type User 
  @model 
  @searchable
  @key(fields: ["username"])
  @auth(
    rules: [
      { allow: private, operations: [read,create,update,delete] }
      { allow: owner, ownerField: "username", operations: [update] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  cognitoID: String!
  username: String! 
  name: String!
  email: AWSEmail!
  typeUser: String!
  trainings: [PlayerTraining] @connection (keyName:"byUser", fields: ["username"])
}

type Player 
  @model 
  @searchable
  @key(fields: ["username"])
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, ownerField: "username", operations: [update] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  cognitoID: String!
  username: String! 
  name: String!
  email: AWSEmail!
  typeUser: String!
  trainings: [PlayerTraining] @connection (keyName:"byPlayer", fields: ["username"])
}

type PlayerTraining 
  @model (queries: null) 
  @key(name:"byTraining", fields: ["trainingID"])
  @key(name:"byPlayer", fields:["playerUsername","createdAt"])
  @key(name:"byUser", fields:["userUsername","createdAt"])
  @auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read,create,update,delete] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) 
  {
    id: ID!
    trainingID: ID!
    createdAt: String!
    playerUsername: String!
    userUsername: String!
    players: [String!]!
    training: Training! @connection(fields: ["trainingID"])
    user: User @connection(fields: ["userUsername"])
    player: Player @connection(fields: ["playerUsername"])
}

type Training 
@model
@auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read,create,update,delete] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) 
{
  id: ID!
  status: TrainingStatus!
  trainer: String!
  player: String!
  owners: [String!]!
  winner: String
  hit: [TrainingHit]
  users: [PlayerTraining] @connection(keyName: "byTraining", fields: ["id"])
}
type Court
@model
@auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read,create,update,delete] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) 
{
  id: ID!
  numeroPista: String!
  day: [Day]
}
type Day
@model
@auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read,create,update,delete] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) 
{
  id: ID!
  dia:String!
  mes:String!
  year:String!
  hora: [Hour]
}
type Hour
@model
@auth(
    rules: [
      { allow: owner, ownerField: "owners", operations: [read,create,update,delete] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) 
{
  id: ID!
  status: CourtStatus!
  hora: String!
  playerUsername: String
  userUsername: String
  player: Player @connection(fields: ["playerUsername"])
  trainer: User @connection(fields: ["userUsername"])
}
enum TrainingStatus{
  ACTIVO
  FINALIZADO
  CANCELADO
}
enum CourtStatus{
  DISPONIBLE
  RESERVADA
}
enum TrainingHit{
  ERROR_NO_FORZADO_DERECHA
  ERROR_NO_FORZADO_REVES
  ERROR_VOLEA_DERECHA
  ERROR_VOLEA_REVES
  ERROR_DERECHA
  ERROR_REVES
  ACIERTO_DERECHA
  ACIERTO_REVES
  ACIERTO_REMATE
  WINNER
}

type User 
  @model 
  @searchable
  @key(fields: ["username"])
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, ownerField: "username", operations: [update] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  cognitoID: String!
  username: String! 
  name: String!
  email: AWSEmail!
}

type Player 
  @model 
  @searchable
  @key(fields: ["username"])
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, ownerField: "username", operations: [update] }
      { allow: private, provider: iam, operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  cognitoID: String!
  username: String! 
  name: String!
  email: AWSEmail!
}

type PlayerTraining @model (queries: null){
  id: ID!
  trainingID: ID!
  playerUsername: String!
  userUsername: String!
  players: [String!]!
  game: Training! @connection(fields: ["trainingID"])
  user: User! @connection(fields: ["userUsername"])
  player: Player! @connection(fields: ["playerUsername"])
}

type Training @model{
  id: ID!
  status: TrainingStatus!
  owner: String!
  players: [String!]!
  winner: String!
}

enum TrainingStatus{
  ACTIVE
  FINISHED
  CANCELLED
}